"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SheetsProvider = exports.SheetProviderContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNativeActionsSheet = require("react-native-actions-sheet");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var SheetProviderContext = exports.SheetProviderContext = /*#__PURE__*/(0, _react.createContext)({
  showSheet: function showSheet(component, props) {
    return {
      id: "",
      update: function update() {},
      close: function close() {}
    };
  },
  hideSheet: function hideSheet(component, props) {}
});
var SheetsProvider = exports.SheetsProvider = function SheetsProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)([]),
    _useState2 = _slicedToArray(_useState, 2),
    sheets = _useState2[0],
    setSheets = _useState2[1];
  var hideSheet = function hideSheet(id, payload, otherOptions) {
    return _reactNativeActionsSheet.SheetManager.hide(id, _objectSpread({
      payload: payload
    }, otherOptions));
  };
  var showSheet = function showSheet(Component, props) {
    var id = "sheet-".concat(sheets.length); // Unique ID for each sheet
    try {
      setSheets([{
        Component: Component,
        id: id,
        props: _objectSpread({
          sheetId: id
        }, props)
      }].concat(_toConsumableArray(sheets)));
      // Open the sheet after adding it
      setTimeout(function () {
        _reactNativeActionsSheet.SheetManager.show(id, {
          payload: _objectSpread({
            sheetId: id
          }, props)
        })["catch"](function (err) {
          console.warn('SheetProvider Error: ', err);
        });
      }, 100);
    } catch (err) {
      console.warn('SheetProvider Error: ', err);
    }
    return {
      id: id,
      update: function update(props) {
        setSheets(function (prevSheets) {
          // console.warn("Updating sheet: ", id);
          var sheetsCopy = _toConsumableArray(prevSheets);
          var sheetIndex = sheetsCopy.findIndex(function (sheet) {
            return sheet.id === id;
          });
          // console.warn("Found Updating sheet: ", sheetIndex, sheetsCopy[sheetIndex], sheetsCopy, prevSheets);
          if (sheetsCopy[sheetIndex]) {
            sheetsCopy[sheetIndex].props = _objectSpread(_objectSpread({}, sheetsCopy[sheetIndex].props), props);

            // console.warn("Updated sheet: ", id);
            return sheetsCopy;
          }
          return prevSheets;
        });
      },
      close: function close() {
        setSheets(function (prevSheets) {
          // console.warn("Closing sheet: ", id);
          var sheetsCopy = _toConsumableArray(prevSheets);
          var sheetIndex = sheetsCopy.findIndex(function (sheet) {
            return sheet.id === id;
          });
          // console.warn("Found Closing sheet: ", sheetIndex, sheetsCopy[sheetIndex], sheetsCopy, prevSheets);
          if (sheetsCopy[sheetIndex]) {
            sheetsCopy[sheetIndex].props = _objectSpread(_objectSpread(_objectSpread({}, sheetsCopy[sheetIndex].props), props), {}, {
              visible: false
            });
            // remove  sheet from imported sheets in page 
            sheetsCopy.splice(sheetIndex, 1);

            // console.warn("Closed sheet: ", id);
            return sheetsCopy;
          }
          return prevSheets;
        });
      }
    };
  };
  return /*#__PURE__*/_react["default"].createElement(SheetProviderContext.Provider, {
    value: {
      showSheet: showSheet,
      hideSheet: hideSheet
    }
  }, /*#__PURE__*/_react["default"].createElement(_reactNativeActionsSheet.SheetProvider, null, sheets.map(function (_ref2, _index) {
    var Component = _ref2.Component,
      props = _ref2.props;
    return /*#__PURE__*/_react["default"].createElement(Component, _extends({
      key: _index
    }, props));
  }), children));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,