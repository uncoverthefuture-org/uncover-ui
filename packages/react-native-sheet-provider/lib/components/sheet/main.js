"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrimarySheet = void 0;
var _reactNativeActionsSheet = _interopRequireDefault(require("react-native-actions-sheet"));
var _lodash = require("lodash");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _excluded = ["sheetId", "innerRef", "containerStyle", "isFullScreen", "headerAlwaysVisible", "defaultOverlayOpacity", "elevation", "overlayColor", "children"];
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }
var PrimarySheet = exports.PrimarySheet = function PrimarySheet(_ref) {
  var _containerStyle$backg;
  var _ref$sheetId = _ref.sheetId,
    sheetId = _ref$sheetId === void 0 ? (0, _lodash.random)(1000000, 90000000).toString() : _ref$sheetId,
    innerRef = _ref.innerRef,
    containerStyle = _ref.containerStyle,
    _ref$isFullScreen = _ref.isFullScreen,
    isFullScreen = _ref$isFullScreen === void 0 ? false : _ref$isFullScreen,
    _ref$headerAlwaysVisi = _ref.headerAlwaysVisible,
    headerAlwaysVisible = _ref$headerAlwaysVisi === void 0 ? isFullScreen ? false : undefined : _ref$headerAlwaysVisi,
    _ref$defaultOverlayOp = _ref.defaultOverlayOpacity,
    defaultOverlayOpacity = _ref$defaultOverlayOp === void 0 ? isFullScreen ? 1 : undefined : _ref$defaultOverlayOp,
    _ref$elevation = _ref.elevation,
    elevation = _ref$elevation === void 0 ? isFullScreen ? 0 : undefined : _ref$elevation,
    _ref$overlayColor = _ref.overlayColor,
    overlayColor = _ref$overlayColor === void 0 ? isFullScreen ? (_containerStyle$backg = containerStyle === null || containerStyle === void 0 ? void 0 : containerStyle.backgroundColor) !== null && _containerStyle$backg !== void 0 ? _containerStyle$backg : "#fff" : undefined : _ref$overlayColor,
    children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useWindowDimensions = (0, _reactNative.useWindowDimensions)(),
    height = _useWindowDimensions.height;
  return /*#__PURE__*/_react["default"].createElement(_reactNativeActionsSheet["default"], _extends({
    ref: innerRef,
    id: sheetId,
    headerAlwaysVisible: headerAlwaysVisible,
    defaultOverlayOpacity: defaultOverlayOpacity,
    overlayColor: overlayColor,
    elevation: elevation,
    containerStyle: _objectSpread({
      height: isFullScreen ? height : 'auto'
    }, containerStyle)
  }, rest), children);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,